services:
  web:
    container_name: yt-web-dev  
    build:
      context: ..
      dockerfile: Dockerfile
    image: yt-web-dev
    pull_policy: build
    ports:
      - "${DJANGO_PORT}:8000"
    volumes:
      - ..:/app/
    env_file:
      - ../.env
    command: >
      sh -c "python manage.py runserver 0.0.0.0:8000"
    depends_on:
      celery:
        condition: service_started
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
  
  postgres:
    container_name: yt-postgres-dev
    image: postgres:17.2-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ../pg_backups:/var/pg_backups
    # ports:
      # - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 60s
      retries: 5
    env_file:
      - ../.env

  redis:
    container_name: yt-redis-dev
    image: redis:7-alpine
    volumes:
      - redis_data:/data/
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  celery:
    container_name: yt-celery-dev
    image: yt-web-dev
    pull_policy: build
    command: celery -A core.project.celery worker -l info -Q media-queue,email-queue
    volumes:
      - ..:/app/
    env_file:
      - ../.env
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  celery-beat:
    container_name: yt-celery-beat-dev
    image: yt-web-dev
    pull_policy: build
    command: celery -A core.project.celery beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ..:/app/
    env_file:
      - ../.env
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  # flower:
  #   container_name: yt-flower-dev
  #   image: mher/flower:latest
  #   command: celery --broker=redis://redis:${REDIS_PORT}/0 flower 
  #   volumes:
  #     - flower_data:/data
  #   env_file:
  #     - ../.env
  #   ports:
  #     - "${FLOWER_PORT}:5555"
  #   environment:
  #     - FLOWER_BASIC_AUTH=${FLOWER_USERNAME}:${FLOWER_PASSWORD}
  #     - FLOWER_PORT=5555
  #     - FLOWER_PERSISTENT=True
  #     - FLOWER_DB=/data/flower
  #   depends_on:
  #     redis:
  #       condition: service_healthy

volumes:
  postgres_data:
    name: yt_api_postgres_data
  redis_data:
    name: yt_api_redis_data
  flower_data:
    name: yt_api_flower_data