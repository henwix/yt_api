services:
  web:
    container_name: yt-web-dev  
    build:
      context: ..
      dockerfile: Dockerfile
    image: yt-web-dev
    ports:
      - "${DJANGO_PORT}:8000"
    volumes:
      - ..:/app/
    env_file:
      - ../.env
    command: "sh entrypoint.dev.sh"
    # command: >
      # sh -c "python manage.py runserver 0.0.0.0:8000"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    # networks:
      # - dev
  
  postgres:
    container_name: yt-postgres-dev
    image: postgres:17.2-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U yt-user -d yt"]
      interval: 5s
      timeout: 30s
      retries: 5
    env_file:
      - ../.env
    # networks:
      # - dev

  redis:
    container_name: yt-redis-dev
    image: redis:7-alpine
    volumes:
      - redis_data:/data/
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    # networks:
      # - dev
  
  celery:
    container_name: yt-celery-dev
    image: yt-web-dev
    command: celery -A core.project.celery worker -l info -Q media-queue,email-queue
    volumes:
      - ..:/app/
    env_file:
      - ../.env
    depends_on:
      - redis
      - postgres
    # networks:
      # - dev

  celery-beat:
    container_name: yt-celery-beat-dev
    image: yt-web-dev
    command: celery -A core.project.celery beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ..:/app/
    env_file:
      - ../.env
    depends_on:
      - redis
      - postgres
    # networks:
      # - dev

volumes:
  postgres_data:
    name: yt_api_postgres_data
  redis_data:
    name: yt_api_redis_data

# networks:
#   dev:
#     driver: bridge