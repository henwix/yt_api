services:
  web:
    # container_name: yt-web-prod
    build:
      context: ..
      dockerfile: Dockerfile.prod
    image: yt-web-prod
    restart: unless-stopped
    volumes:
      - ../static:/app/static
    env_file:
      - ../.env
    command: "sh entrypoint.prod.sh"
    depends_on:
      celery:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  nginx:
    container_name: yt-nginx-prod
    image: nginx:latest
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx.conf:/etc/nginx/nginx.conf:ro
      - ../static:/static:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot
    depends_on:
      - web

  postgres:
    container_name: yt-postgres-prod
    image: postgres:17.2-alpine
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 30s
      retries: 5
    env_file:
      - ../.env

  redis:
    container_name: yt-redis-prod
    image: redis:7-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data:/data/

  celery:
    container_name: yt-celery-prod
    image: yt-web-prod
    restart: unless-stopped
    command: celery -A core.project.celery worker -l info -Q media-queue,email-queue
    env_file:
      - ../.env
    healthcheck:
      test: ["CMD", "celery", "-A", "core.project.celery", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  celery-beat:
    container_name: yt-celery-beat-prod
    image: yt-web-prod
    restart: unless-stopped
    command: sh -c "sleep 15 && celery -A core.project.celery beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    env_file:
      - ../.env
    depends_on:
      web:
        condition: service_started
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  flower:
    container_name: yt-flower-prod
    image: yt-web-prod
    command: celery -A core.project.celery flower --port=5555 --broker=redis://redis:${REDIS_PORT}/0
    volumes:
      - ..:/app/
    env_file:
      - ../.env
    environment:
      - FLOWER_BASIC_AUTH=${FLOWER_USERNAME}:${FLOWER_PASSWORD}
    depends_on:
      redis:
        condition: service_healthy

volumes:
  postgres_data:
    name: yt_api_postgres_data
  redis_data:
    name: yt_api_redis_data
