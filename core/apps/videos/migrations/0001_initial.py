# Generated by Django 5.1.6 on 2025-04-15 01:05

import core.apps.videos.models
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('channels', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('id', models.CharField(db_index=True, default=core.apps.videos.models.generate_playlist_link, editable=False, max_length=32, primary_key=True, serialize=False, unique=True)),
                ('title', models.CharField(max_length=150)),
                ('description', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('PUBLIC', 'Public'), ('PRIVATE', 'Private')], default='PRIVATE', max_length=7)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='playlists', to='channels.channel')),
            ],
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('video_id', models.CharField(default=core.apps.videos.models.generate_video_link, editable=False, max_length=11, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('description', models.TextField(blank=True, db_index=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('yt_link', models.CharField(blank=True, max_length=255)),
                ('file', models.FileField(blank=True, null=True, upload_to='videos')),
                ('status', models.CharField(choices=[('PRIVATE', 'Private'), ('UNLISTED', 'Unlisted'), ('PUBLIC', 'Public')], default='PUBLIC', max_length=10)),
                ('upload_status', models.CharField(choices=[('PENDING', 'Pending'), ('IN_PROGRESS', 'In progress'), ('FINISHED', 'Finished')], default='PENDING')),
                ('is_reported', models.BooleanField(default=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='channels.channel')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PlaylistItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('playlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='videos.playlist')),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='videos.video')),
            ],
        ),
        migrations.AddField(
            model_name='playlist',
            name='videos',
            field=models.ManyToManyField(db_index=True, through='videos.PlaylistItem', to='videos.video'),
        ),
        migrations.CreateModel(
            name='VideoComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='video_comments', to='channels.channel')),
                ('likes', models.ManyToManyField(blank=True, related_name='liked_video_comments', to='channels.channel')),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='videos.video')),
            ],
        ),
        migrations.CreateModel(
            name='VideoHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('watched_at', models.DateTimeField(auto_now_add=True)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', to='channels.channel')),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='videos.video')),
            ],
        ),
        migrations.CreateModel(
            name='VideoLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_like', models.BooleanField()),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='liked_videos', to='channels.channel')),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='videos.video')),
            ],
        ),
        migrations.CreateModel(
            name='VideoView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('channel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='video_views', to='channels.channel')),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='videos.video')),
            ],
        ),
        migrations.AddConstraint(
            model_name='playlistitem',
            constraint=models.UniqueConstraint(fields=('playlist', 'video'), name='playlist_item_unique'),
        ),
        migrations.AddConstraint(
            model_name='videohistory',
            constraint=models.UniqueConstraint(fields=('channel', 'video'), name='unique_watch_history'),
        ),
        migrations.AddConstraint(
            model_name='videolike',
            constraint=models.UniqueConstraint(fields=('channel', 'video'), name='unique_channel_video_like'),
        ),
    ]
